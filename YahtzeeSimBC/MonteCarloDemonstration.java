import java.security.SecureRandom;
import java.util.Random;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.scene.Scene;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.scene.control.Label;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.util.Duration;
/**
 *
 * @author 000359041
 * @web http://java-buddy.blogspot.com/2015/07/apply-animaton-in-javafx-charts-with.html
 */
public class MonteCarloDemonstration extends Application {
    //int howManyDie = 1; int experiment = 1;
    //int howManyDie = 2;int experiment = 2;
    int howManyDie = 5;int experiment = 3;
    //int howManyDie = 100;int experiment = 4;
    final int iterations = 1000000;
    
    SecureRandom random = new SecureRandom();

    double[] group = new double[ howManyDie * 6 ]; // 1-6 x # of dice
    int count = 0;

    // initialize the data set - makes more sense if your data is objects
    private void prepareData() {
        for (int i = 0; i < group.length; i++) group[i] = 0.0;
    }

    public int doExperiment() {
        int data = 0;
        for (int j = 0; j < howManyDie; j++ )
            data += random.nextInt(6);
        
        data += howManyDie; // remember the data was generated by 0-5, so offset by +1 for each die
        return data;
    }
    
    @Override
    public void start(Stage primaryStage) {
 
        prepareData();
 
        Label labelInfo = new Label();
        labelInfo.setText(
                "java.version: " + System.getProperty("java.version") + "\n"
                + "javafx.runtime.version: " + System.getProperty("javafx.runtime.version")
        );
 
        final CategoryAxis xAxis = new CategoryAxis();
        final NumberAxis yAxis = new NumberAxis();
        final BarChart<String, Number> barChart
                = new BarChart<>(xAxis, yAxis);
        barChart.setCategoryGap(0);
        barChart.setBarGap(0);
 
        xAxis.setLabel("Value");
        yAxis.setLabel("Samples");
 
        XYChart.Series series1 = new XYChart.Series();
        series1.setName("Histogram");
        
        // initialize the bars
        for ( int i = 0; i < group.length; i++ )
            series1.getData().add(new XYChart.Data(Integer.toString(i), group[i]));
 
        barChart.getData().addAll(series1);
         
        Label labelCnt = new Label();
        Label labelAnimated = new Label();
 
        VBox vBox = new VBox();
        vBox.getChildren().addAll(labelInfo, barChart, labelCnt, labelAnimated);
 
        StackPane root = new StackPane();
        root.getChildren().add(vBox);
 
        Scene scene = new Scene(root, 800, 500);
 
        primaryStage.setTitle("Monte Carlo Demonstration");
        primaryStage.setScene(scene);
        primaryStage.show();
        
        //Apply Animating Data in Charts
        //ref: http://docs.oracle.com/javafx/2/charts/bar-chart.htm
        //"Animating Data in Charts" section
         
        Timeline timeline = new Timeline();
        timeline.getKeyFrames().add(
                new KeyFrame(Duration.millis(1), (ActionEvent actionEvent) -> {
 
            int data = doExperiment();
            count++;
            
            // tuned for the idea of throwing and summing die
            // to use for other types of data this will need
            // to be altered
            int dataIndex = data - howManyDie; // roll is in [howManyDie to 6*howManyDie], 
            group[dataIndex]++;
            series1.getData().set(dataIndex, new XYChart.Data(Integer.toString(data), (100*(double)group[dataIndex]/count)));
            
            if ( count % 100 == 0 ) {
                String s;
                if ( experiment == 4 )
                    //s = "Iterations: " + count + "\nObserved 339 " + ((int)group[339-howManyDie]) + " times.";
                    s = "Iterations: " + count + "\nObserved 339 " + (double)((int)(1000000*group[339-howManyDie]/count)/10000.0) + "%";
                else
                    s = "Iterations: " + count;
                for(int i=0; i<group.length; i++){
                        series1.getData().set(i, new XYChart.Data(Integer.toString(i+howManyDie), (100*(double)group[i]/count)));
                }
                labelCnt.setText(s);
                labelAnimated.setText("barChart.getAnimated() = " + barChart.getAnimated());
            }             
        }));
 
        timeline.setCycleCount(iterations);  // number of times to play the animation - 1 frame per cycle in this setup
        timeline.play();
 
        barChart.setAnimated(false);
         
    }
 
    public static void main(String[] args) {

        launch(args);

    }    
    
}
